# Kubernetes deployment configuration for Library Management System
# Provides container orchestration, auto-scaling, and high availability

apiVersion: v1
kind: Namespace
metadata:
  name: library-system

---
# ConfigMap for environment variables
apiVersion: v1
kind: ConfigMap
metadata:
  name: library-config
  namespace: library-system
data:
  NODE_ENV: "production"
  REDIS_URL: "redis://redis-service:6379"

---
# Secret for sensitive data
apiVersion: v1
kind: Secret
metadata:
  name: library-secrets
  namespace: library-system
type: Opaque
stringData:
  NEXT_PUBLIC_SUPABASE_URL: "your-supabase-url"
  NEXT_PUBLIC_SUPABASE_ANON_KEY: "your-supabase-anon-key"
  SUPABASE_SERVICE_ROLE_KEY: "your-supabase-service-role-key"
  POSTGRES_URL: "your-postgres-url"

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-deployment
  namespace: library-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command: ["redis-server", "--appendonly", "yes"]
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        volumeMounts:
        - name: redis-storage
          mountPath: /data
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: redis-pvc

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: library-system
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379

---
# Redis PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: library-system
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
# Application Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: library-app-deployment
  namespace: library-system
spec:
  replicas: 3
  selector:
    matchLabels:
      app: library-app
  template:
    metadata:
      labels:
        app: library-app
    spec:
      containers:
      - name: library-app
        image: library-management-system:latest
        ports:
        - containerPort: 3000
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: library-config
              key: NODE_ENV
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: library-config
              key: REDIS_URL
        - name: NEXT_PUBLIC_SUPABASE_URL
          valueFrom:
            secretKeyRef:
              name: library-secrets
              key: NEXT_PUBLIC_SUPABASE_URL
        - name: NEXT_PUBLIC_SUPABASE_ANON_KEY
          valueFrom:
            secretKeyRef:
              name: library-secrets
              key: NEXT_PUBLIC_SUPABASE_ANON_KEY
        - name: SUPABASE_SERVICE_ROLE_KEY
          valueFrom:
            secretKeyRef:
              name: library-secrets
              key: SUPABASE_SERVICE_ROLE_KEY
        - name: POSTGRES_URL
          valueFrom:
            secretKeyRef:
              name: library-secrets
              key: POSTGRES_URL
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5

---
# Application Service
apiVersion: v1
kind: Service
metadata:
  name: library-app-service
  namespace: library-system
spec:
  selector:
    app: library-app
  ports:
  - port: 80
    targetPort: 3000
  type: ClusterIP

---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: library-ingress
  namespace: library-system
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - your-domain.com
    secretName: library-tls
  rules:
  - host: your-domain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: library-app-service
            port:
              number: 80

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: library-app-hpa
  namespace: library-system
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: library-app-deployment
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
